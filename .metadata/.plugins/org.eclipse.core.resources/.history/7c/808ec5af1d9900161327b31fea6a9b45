package hr.fer.zemris.optjava.dz3;

import java.nio.file.Path;
import java.nio.file.Paths;

import hr.fer.zemris.optjava.dz3.decoders.PassThroughDecoder;
import hr.fer.zemris.optjava.dz3.functions.Function1;
import hr.fer.zemris.optjava.dz3.neighborhoods.DoubleArrayUnifNeighborhood;
import hr.fer.zemris.optjava.dz3.schedules.GeometricTempSchedule;
import hr.fer.zemris.optjava.dz3.solutions.DoubleArraySolution;

public class RegresijaSustava {
	
	private static final String ARG_REGEX = "decimal|binary:\\d";
	
	private static final int NUM_OF_VARIABLES = 6;
	
	private static final double APLHA = 0.8;
	private static final double T_INITIAL = 1000;
	private static final int INNER_LIMIT = 100;
	private static final int OUTER_LIMIT = 100;
	
	private static final double[] P_LINE1 = new double[] { -0.160, 2.320, -3.500, -2.660, 4.620, -171.36699979479872 };

	public static void main(String[] args) {
		
		if(!areArgsCorrect(args)) {
			System.err.println("please make sure inputs are correct");
			System.exit(1);
		}
		
		if(args[1].equals("decimal")) {
			
			new SimulatedAnnealing<DoubleArraySolution>(new PassThroughDecoder(), new DoubleArrayUnifNeighborhood(new double[]{}), new DoubleArraySolution(6), new Function1(args[0]), true, new GeometricTempSchedule(0.0, 0.0, 0, 0));
			
		} else {
			
		}
		
	}
	
	private static boolean areArgsCorrect(String[] args) {
		
		if(args == null || args.length != 2) {
			return false;
		}
		
		Path filePath = Paths.get(args[0]);
		if(!filePath.toFile().exists()) {
			return false;
		}
		
		if(!args[1].matches(ARG_REGEX)) {
			return false;
		}
		
		return true;
	}

}
