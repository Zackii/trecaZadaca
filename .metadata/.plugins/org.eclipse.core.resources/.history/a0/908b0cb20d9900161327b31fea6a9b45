package hr.fer.zemris.optjava.dz3;

import java.util.Random;

import hr.fer.zemris.optjava.dz3.decoders.IDecoder;
import hr.fer.zemris.optjava.dz3.functions.IFunction;
import hr.fer.zemris.optjava.dz3.neighborhoods.INeighborhood;
import hr.fer.zemris.optjava.dz3.schedules.ITempSchedule;

public class SimulatedAnnealing<T> implements IOptAlgorithm<T> {

	private IDecoder<T> decoder;
	private INeighborhood<T> neighborhood;
	private ITempSchedule schedule;
	private T startWith;
	private IFunction function;
	private boolean minimize;
	private Random rand;

	public SimulatedAnnealing(IDecoder<T> decoder, INeighborhood<T> neighborhood, IFunction function,
			boolean minimize) {
		this.decoder = decoder;
		this.neighborhood = neighborhood;
		this.startWith = startWith;
		this.function = function;
		this.minimize = minimize;
		this.schedule = schedule;
		this.rand = new Random();
	}

	@Override
	public T run() {
		double tCurrent = schedule.getNextTemperature();

		int iCounter = schedule.getInnerLoopCounter();
		int oCounter = schedule.getOuterLoopCounter();
		
		T neighbor;
		T currentSolution = startWith;
		
		double neighborSolutionDiff;

		for (int i = 0; i < oCounter; i++) {
			for (int j = 0; j < iCounter; j++) {
				neighbor = neighborhood.randomNeighbor(currentSolution);
				neighborSolutionDiff = neighbor.compareTo(currentSolution);

				if (acceptanceProbability(neighborSolutionDiff, tCurrent, minimize) > Math.random()) {
					currentSolution = neighbor;
				}
			}

			tCurrent = schedule.getNextTemperature();
		}

		return null;
	}

}
