package hr.fer.zemris.optjava.dz2;

import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;

public class Funkcija4 implements IHFunction {

	private static final int BROJ_VARIJABLI = 5;
	private static final int BROJ_KONSTANTI = 6;
	private static final int INDEKS_VRIJEDNOSTI_FUNKCIJE = 5;
	private static final int BROJ_LINIJA = 20;

	private double[][] varijable;

	public Funkcija4(String putDatoteke) {
		varijable = new CitacSustavaLinJedn(putDatoteke).vratiKoeficijente();
	}

	@Override
	public int vratiBrojVarijabli() {
		return BROJ_KONSTANTI;
	}

	@Override
	public double vratiVrijednostU(RealVector vektor) {
		double[] poljeKonstanti = vektor.toArray();
		double vrijednostIteLinJedn;
		double sumaRazlikeKvadrata = 0;

		for (int i = 0; i < BROJ_VARIJABLI; i++) {
			vrijednostIteLinJedn = vrijednostIteLinJednZaDanoPoljeXa(varijable[i], poljeKonstanti);
			sumaRazlikeKvadrata = Math.pow(vrijednostIteLinJedn - varijable[i][INDEKS_VRIJEDNOSTI_FUNKCIJE], 2);
		}

		return sumaRazlikeKvadrata;
	}

	private double vrijednostIteLinJednZaDanoPoljeXa(double[] x, double[] k) {
		return k[0] * x[0] + k[1] * Math.pow(x[0], 3) * x[1]
				+ k[2] * Math.pow(Math.E, k[3] * x[2]) * (1 + Math.cos(k[4] * x[3])) + k[5] * x[3] * Math.pow(x[4], 2);
	}

	@Override
	public RealVector vratiVrijednostGradijentaU(RealVector vector) {
		double[] poljeKonstanti = vector.toArray();
		double[] gradijent = new double[BROJ_KONSTANTI];
		double[] poljeRazlika = new double[BROJ_LINIJA];

		for (int i = 0; i < BROJ_LINIJA; i++) {
			poljeRazlika[i] = vrijednostIteLinJednZaDanoPoljeXa(varijable[i], poljeKonstanti)
					- varijable[i][INDEKS_VRIJEDNOSTI_FUNKCIJE];
		}

		izracunajGradijent(poljeKonstanti, gradijent, varijable, poljeRazlika);

		return new ArrayRealVector(gradijent);
	}

	private void izracunajGradijent(double[] konst, double[] gradijent, double[][] var, double[] poljeRazlika) {

		gradijent[0] = vrijednostParcijalneDerivacijePoKonstanti((i) -> 2 * poljeRazlika[i] * var[i][0]);

		gradijent[1] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> 2 * poljeRazlika[i] * Math.pow(var[i][0], 3) * var[i][1]);

		gradijent[2] = vrijednostParcijalneDerivacijePoKonstanti((i) -> 2 * poljeRazlika[i]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])));

		gradijent[3] = vrijednostParcijalneDerivacijePoKonstanti((i) -> 2 * poljeRazlika[i] * konst[2] * var[i][2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])));

		gradijent[4] = vrijednostParcijalneDerivacijePoKonstanti((i) -> -2 * poljeRazlika[i] * var[i][3] * konst[2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (Math.sin(konst[4] * var[i][3])));

		gradijent[5] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> 2 * poljeRazlika[i] * var[i][3] * Math.pow(var[i][4], 2));

	}

	private double vrijednostParcijalneDerivacijePoKonstanti(IVrijednostParcijalneDerivacije vpd) {
		double vrijednost = 0;
		for (int i = 0; i < BROJ_VARIJABLI; i++) {
			vrijednost += vpd.izracunajZaVarijabluIKonstantu(i);
		}
		return vrijednost;
	}

	@Override
	public RealMatrix vratiVrijednostHesseoveMatriceU(RealVector vector) {
		double[] poljeKonstanti = vector.toArray();
		double[][] hesseovaMatrica = new double[BROJ_KONSTANTI][BROJ_KONSTANTI];
		double[] poljeRazlika = new double[BROJ_LINIJA];

		for (int i = 0; i < BROJ_LINIJA; i++) {
			poljeRazlika[i] = vrijednostIteLinJednZaDanoPoljeXa(varijable[i], poljeKonstanti)
					- varijable[i][INDEKS_VRIJEDNOSTI_FUNKCIJE];
		}

		izracunajHesseovuMatricu(poljeKonstanti, hesseovaMatrica, varijable);

		return new Array2DRowRealMatrix(hesseovaMatrica);
	}

	private void izracunajHesseovuMatricu(double[] konst, double[][] hesseovaMatrica, double[][] var) {

		hesseovaMatrica[0][0] = vrijednostParcijalneDerivacijePoKonstanti((i) -> 2 * var[i][0] * var[i][0]);

		hesseovaMatrica[1][0] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> 2 * Math.pow(var[i][0], 3) * var[i][1] * Math.pow(var[i][0], 3) * var[i][1]);

		hesseovaMatrica[2][0] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> 2 * Math.pow(Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])), 2));

		hesseovaMatrica[2][3] = vrijednostParcijalneDerivacijePoKonstanti((i) -> 2 * var[i][2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])) * konst[2] * var[i][2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])));

		hesseovaMatrica[2][4] = vrijednostParcijalneDerivacijePoKonstanti((i) -> 2 * var[i][3]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (Math.sin(konst[4] * var[i][3])) * var[i][3] * konst[2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (Math.sin(konst[4] * var[i][3])));
		
		hesseovaMatrica[3][0] = vrijednostParcijalneDerivacijePoKonstanti((i) -> 2 * var[i][3]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (Math.sin(konst[4] * var[i][3])) * var[i][3] * konst[2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (Math.sin(konst[4] * var[i][3])));

		hesseovaMatrica[2][3] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> var[i][2] * Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])));

		hesseovaMatrica[2][4] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> -var[i][3] * Math.pow(Math.E, konst[3] * var[i][2]) * (Math.sin(konst[4] * var[i][3])));

		hesseovaMatrica[3][2] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> var[i][2] * Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])));

		hesseovaMatrica[3][3] = vrijednostParcijalneDerivacijePoKonstanti((i) -> konst[2] * Math.pow(var[i][2], 2)
				* Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.cos(konst[4] * var[i][3])));

		hesseovaMatrica[3][4] = vrijednostParcijalneDerivacijePoKonstanti((i) -> -konst[2] * var[i][2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (Math.sin(konst[4] * var[i][3])));

		hesseovaMatrica[4][2] = vrijednostParcijalneDerivacijePoKonstanti(
				(i) -> -var[i][3] * Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.sin(konst[4] * var[i][3])));

		hesseovaMatrica[4][3] = vrijednostParcijalneDerivacijePoKonstanti((i) -> -var[i][3] * var[i][2] * konst[2]
				* Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.sin(konst[4] * var[i][3])));

		hesseovaMatrica[4][4] = vrijednostParcijalneDerivacijePoKonstanti((i) -> -Math.pow(var[i][3], 2)
				* Math.pow(Math.E, konst[3] * var[i][2]) * (1 + Math.sin(konst[4] * var[i][3])));

	}

}
