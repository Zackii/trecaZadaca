package hr.fer.zemris.optjava.dz3.neighborhoods;

import java.util.Arrays;
import java.util.Random;

import hr.fer.zemris.optjava.dz3.solutions.BitvectorSolution;

public class BitvectorBinomNeighborhood implements INeighborhood<BitvectorSolution> {

	private int[] changeBitsPerVariable;
	private int[] bitsPerVariable;
	private Random rand;
	private RandIntegerGenerator generator;

	public BitvectorBinomNeighborhood(int[] changeBitsPerVariable, int[] bitsPerVariable) {
		this.changeBitsPerVariable = Arrays.copyOf(changeBitsPerVariable, changeBitsPerVariable.length);
		this.bitsPerVariable = Arrays.copyOf(bitsPerVariable, bitsPerVariable.length);
		this.rand = new Random();
		this.generator = new RandIntegerGenerator();
	}
	
	@Override
	public BitvectorSolution randomNeighbor(BitvectorSolution solution) {
		int variableBitsStart = 0;
		int shift;
		int howManyBitsShouldChange;
		BitvectorSolution neighbor = solution.duplicate();

		for (int i = 0; i < bitsPerVariable.length; i++) {
			howManyBitsShouldChange = rand.nextInt(changeBitsPerVariable[i] + 1);
			generator.setGenerator(i);

			for (int j = 0; j < howManyBitsShouldChange; j++) {
				shift = generator.nextInt();
				
				if(neighbor.bits[variableBitsStart + shift] == 1) {
					neighbor.bits[variableBitsStart + shift] = 0;
					
				} else {
					neighbor.bits[variableBitsStart + shift] = 1;
					
				}
			}

			variableBitsStart += bitsPerVariable[i];
		}

		
		return null;
	}
	
	private class RandIntegerGenerator {
		private int numOfInts;
		private int[] intArray;
		
		private int i;
		private int j;
		private int randInt;
		
		private void setGenerator(int i) {
			this.numOfInts = bitsPerVariable[i];
			for(int j = 0; j < numOfInts; j++) {
				intArray[j] = j;
			}
		}
		
		private int nextInt() {
			i = rand.nextInt(numOfInts);
			randInt = intArray[i];
			
			j = intArray[numOfInts - 1];
			intArray[i] = j;
			
			numOfInts--;
			
			return randInt;
		}
		
	}

}
